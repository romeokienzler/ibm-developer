[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a38db3d1e77f3735",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Fluid Simulator",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{ \"d\": {\"count\":0, \"hardness\": 61, \"temperature\": 50, \"flowrate\": 11, \"fluidlevel\": \"acceptable\" } }",
        "payloadType": "json",
        "x": 380,
        "y": 200,
        "wires": [
            [
                "86d0cd4dbe2b133e"
            ]
        ]
    },
    {
        "id": "a713da42ee208c91",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Voltage Sensor Simulator",
        "repeat": "3",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{ \"d\": { \"voltage\": 240, \"frequency\": 50 } }",
        "payloadType": "json",
        "x": 359.66668701171875,
        "y": 275.1000061035156,
        "wires": [
            [
                "037488669499eb64"
            ]
        ]
    },
    {
        "id": "cb36326de9b10899",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "Mechanical Sensor Simulator",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{ \"d\": { \"speed\": 1200 } }",
        "payloadType": "json",
        "x": 367.66668701171875,
        "y": 359.1000061035156,
        "wires": [
            [
                "b3da99b1af9fa855"
            ]
        ]
    },
    {
        "id": "86d0cd4dbe2b133e",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Fluid data",
        "func": "// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\nvar hardness = context.get('hardness')||0;\nvar randomness = context.get('randomness')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 300 == 0) {\n    context.set('randomness',1);\n    context.set('hardness', 83);\n} else if(count % 20 == 0) {\n    context.set('randomness',0);\n} else if(count % 121 == 0) {\n    context.set('randomness',2);\n    context.set('hardness', 100);\n}\n\nif(randomness == 0) {\n    // no variation\n    msg.payload.d.hardness = Math.floor(Math.random() * (80 - 70 + 1) + 70);\n} else if(randomness == 1) {\n    // gradually increase\n    msg.payload.d.hardness = hardness + 1;\n    context.set('hardness', (hardness + 1));\n} else {\n    msg.payload.d.hardness = hardness + 5;\n    context.set('hardness', (hardness + 5));\n}\nmsg.payload.d.temperature = Math.floor(Math.random() * (100 - 80 + 1) + 80);\n\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"fluid\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 601.5500183105469,
        "y": 199.48333740234375,
        "wires": [
            [
                "4354533fa7063ad2"
            ]
        ]
    },
    {
        "id": "037488669499eb64",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Voltage data",
        "func": "// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 100 <= 90) {\n    msg.payload.d.voltage = Math.floor(Math.random() * (240 - 220) + 220);\n} else {\n    msg.payload.d.voltage = Math.floor(Math.random() * (260 - 240) + 240);\n}\nmsg.payload.d.frequency = Math.floor(Math.random() * (80 - 60 + 1) + 60);\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"voltage\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 578.550048828125,
        "y": 250.98333740234375,
        "wires": [
            [
                "4354533fa7063ad2"
            ]
        ]
    },
    {
        "id": "b3da99b1af9fa855",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Drum data",
        "func": "// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 100 <= 90) {\n    // No variation - within the safe limit\n    msg.payload.d.speed = Math.floor(Math.random() * (1100 - 1000) + 1000);    \n} else {\n    msg.payload.d.speed = Math.floor(Math.random() * (1300 - 1150) + 1150);        \n}\n\n\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"drum\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 610.5500183105469,
        "y": 358.98333740234375,
        "wires": [
            [
                "4354533fa7063ad2"
            ]
        ]
    },
    {
        "id": "4354533fa7063ad2",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "msg.payload.d.ts = new Date().getTime();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 786.5,
        "y": 275.23333740234375,
        "wires": [
            [
                "bd622cbf49c93f0b"
            ]
        ]
    },
    {
        "id": "bd622cbf49c93f0b",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 870.5,
        "y": 353.98333740234375,
        "wires": []
    }
]
