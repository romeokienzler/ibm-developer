[
    {
        "id": "b6e91a4716295a94",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c9b8a8d845201303",
        "type": "inject",
        "z": "b6e91a4716295a94",
        "name": "Fluid Simulator",
        "repeat": "1",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{ \"d\": {\"count\":0, \"hardness\": 61, \"temperature\": 50, \"flowrate\": 11, \"fluidlevel\": \"acceptable\" } }",
        "payloadType": "json",
        "x": 500,
        "y": 240,
        "wires": [
            [
                "9148cb4ba8b15566"
            ]
        ]
    },
    {
        "id": "a97488bae1d8b985",
        "type": "inject",
        "z": "b6e91a4716295a94",
        "name": "Voltage Sensor Simulator",
        "repeat": "3",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{ \"d\": { \"voltage\": 240, \"frequency\": 50 } }",
        "payloadType": "json",
        "x": 479.66668701171875,
        "y": 315.1000061035156,
        "wires": [
            [
                "197f6ceab6c7b763"
            ]
        ]
    },
    {
        "id": "beb97d56312eea59",
        "type": "inject",
        "z": "b6e91a4716295a94",
        "name": "Mechanical Sensor Simulator",
        "repeat": "5",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "{ \"d\": { \"speed\": 1200 } }",
        "payloadType": "json",
        "x": 487.66668701171875,
        "y": 399.1000061035156,
        "wires": [
            [
                "cc870308d0b2bb34"
            ]
        ]
    },
    {
        "id": "9148cb4ba8b15566",
        "type": "function",
        "z": "b6e91a4716295a94",
        "name": "Fluid data",
        "func": "// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\nvar hardness = context.get('hardness')||0;\nvar randomness = context.get('randomness')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 300 == 0) {\n    context.set('randomness',1);\n    context.set('hardness', 83);\n} else if(count % 20 == 0) {\n    context.set('randomness',0);\n} else if(count % 121 == 0) {\n    context.set('randomness',2);\n    context.set('hardness', 100);\n}\n\nif(randomness == 0) {\n    // no variation\n    msg.payload.d.hardness = Math.floor(Math.random() * (80 - 70 + 1) + 70);\n} else if(randomness == 1) {\n    // gradually increase\n    msg.payload.d.hardness = hardness + 1;\n    context.set('hardness', (hardness + 1));\n} else {\n    msg.payload.d.hardness = hardness + 5;\n    context.set('hardness', (hardness + 5));\n}\nmsg.payload.d.temperature = Math.floor(Math.random() * (100 - 80 + 1) + 80);\n\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"fluid\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 721.5500183105469,
        "y": 239.48333740234375,
        "wires": [
            [
                "05f5b626c7ef281d"
            ]
        ]
    },
    {
        "id": "197f6ceab6c7b763",
        "type": "function",
        "z": "b6e91a4716295a94",
        "name": "Voltage data",
        "func": "// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 100 <= 90) {\n    msg.payload.d.voltage = Math.floor(Math.random() * (240 - 220) + 220);\n} else {\n    msg.payload.d.voltage = Math.floor(Math.random() * (260 - 240) + 240);\n}\nmsg.payload.d.frequency = Math.floor(Math.random() * (80 - 60 + 1) + 60);\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"voltage\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 698.550048828125,
        "y": 290.98333740234375,
        "wires": [
            [
                "05f5b626c7ef281d"
            ]
        ]
    },
    {
        "id": "cc870308d0b2bb34",
        "type": "function",
        "z": "b6e91a4716295a94",
        "name": "Drum data",
        "func": "// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 100 <= 90) {\n    // No variation - within the safe limit\n    msg.payload.d.speed = Math.floor(Math.random() * (1100 - 1000) + 1000);    \n} else {\n    msg.payload.d.speed = Math.floor(Math.random() * (1300 - 1150) + 1150);        \n}\n\n\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"drum\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 730.5500183105469,
        "y": 398.98333740234375,
        "wires": [
            [
                "05f5b626c7ef281d"
            ]
        ]
    },
    {
        "id": "05f5b626c7ef281d",
        "type": "function",
        "z": "b6e91a4716295a94",
        "name": "",
        "func": "msg.payload.d.ts = new Date().getTime();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 906.5,
        "y": 315.23333740234375,
        "wires": [
            [
                "7d129d6b6b1d2bf3"
            ]
        ]
    },
    {
        "id": "7d129d6b6b1d2bf3",
        "type": "debug",
        "z": "b6e91a4716295a94",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 1090,
        "y": 420,
        "wires": []
    }
